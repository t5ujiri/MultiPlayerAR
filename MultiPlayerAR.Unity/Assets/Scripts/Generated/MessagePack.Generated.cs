// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(13)
            {
                { typeof(global::System.Collections.Generic.List<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>), 0 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand), 1 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent), 2 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream), 3 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream), 4 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand), 5 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand), 6 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommand), 7 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined), 8 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft), 9 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved), 10 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand), 11 },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke), 12 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>();
                case 1: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommandFormatter();
                case 2: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEventFormatter();
                case 3: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStreamFormatter();
                case 4: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStreamFormatter();
                case 5: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommandFormatter();
                case 6: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommandFormatter();
                case 7: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommandFormatter();
                case 8: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoinedFormatter();
                case 9: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeftFormatter();
                case 10: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMovedFormatter();
                case 11: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommandFormatter();
                case 12: return new MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpokeFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class ICommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public ICommandFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(4, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved).TypeHandle, new KeyValuePair<int, int>(3, 3) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(4)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand result = null;
            switch (key)
            {
                case 0:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ICommand)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IEventFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IEventFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream).TypeHandle, new KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream>().Serialize(ref writer, (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent result = null;
            switch (key)
            {
                case 0:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent)options.Resolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.net.caffeineinject.multiplayerar.servershared.messagepackobjects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ARWorldEventStreamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream>().Serialize(ref writer, value.EventStream, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __EventStream__ = default(global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EventStream__ = formatterResolver.GetFormatterWithVerify<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.ARWorldEventStream();
            ____result.RoomName = __RoomName__;
            ____result.EventStream = __EventStream__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EventStreamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>>().Serialize(ref writer, value.Events, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Events__ = default(global::System.Collections.Generic.List<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Events__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.IEvent>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.EventStream();
            ____result.Events = __Events__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerName, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Serialize(ref writer, value.Rotation, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __PlayerId__ = default(string);
            var __PlayerName__ = default(string);
            var __Position__ = default(global::UnityEngine.Vector3);
            var __Rotation__ = default(global::UnityEngine.Quaternion);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __PlayerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Rotation__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.JoinCommand();
            ____result.RoomName = __RoomName__;
            ____result.PlayerId = __PlayerId__;
            ____result.PlayerName = __PlayerName__;
            ____result.Position = __Position__;
            ____result.Rotation = __Rotation__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LeaveCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.LeaveCommand();
            ____result.PlayerId = __PlayerId__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MoveCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommand>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Serialize(ref writer, value.Rotation, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);
            var __Position__ = default(global::UnityEngine.Vector3);
            var __Rotation__ = default(global::UnityEngine.Quaternion);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Rotation__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.MoveCommand();
            ____result.PlayerId = __PlayerId__;
            ____result.Position = __Position__;
            ____result.Rotation = __Rotation__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerJoinedFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerName, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Serialize(ref writer, value.Rotation, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __PlayerId__ = default(string);
            var __PlayerName__ = default(string);
            var __Position__ = default(global::UnityEngine.Vector3);
            var __Rotation__ = default(global::UnityEngine.Quaternion);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __PlayerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Rotation__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerJoined(__RoomName__, __PlayerId__, __PlayerName__, __Position__, __Rotation__);
            ____result.RoomName = __RoomName__;
            ____result.PlayerId = __PlayerId__;
            ____result.PlayerName = __PlayerName__;
            ____result.Position = __Position__;
            ____result.Rotation = __Rotation__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerLeftFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerName, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);
            var __PlayerName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PlayerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerLeft();
            ____result.PlayerId = __PlayerId__;
            ____result.PlayerName = __PlayerName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerMovedFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Serialize(ref writer, value.Rotation, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);
            var __Position__ = default(global::UnityEngine.Vector3);
            var __Rotation__ = default(global::UnityEngine.Quaternion);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Position__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Vector3>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Rotation__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.Quaternion>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerMoved();
            ____result.PlayerId = __PlayerId__;
            ____result.Position = __Position__;
            ____result.Rotation = __Rotation__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerSayCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);
            var __Message__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSayCommand();
            ____result.PlayerId = __PlayerId__;
            ____result.Message = __Message__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerSpokeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke>
    {


        public void Serialize(ref MessagePackWriter writer, global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerId, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Message, options);
        }

        public global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerId__ = default(string);
            var __PlayerName__ = default(string);
            var __Message__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PlayerName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Message__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::net.caffeineinject.multiplayerar.servershared.messagepackobjects.PlayerSpoke();
            ____result.PlayerId = __PlayerId__;
            ____result.PlayerName = __PlayerName__;
            ____result.Message = __Message__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

